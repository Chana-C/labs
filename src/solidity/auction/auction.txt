// SPDX-License-Identifier: MIT

    pragma solidity ^0.8.20;
    import "forge-std/console.sol";
    import "@openzeppelin/ERC721/ERC721.sol";
    contract Auction{
        address public highestBidder;
        uint public highestBid;
        bool isInitialized;
        struct Seller{
            address public  immutable sellerAddress;
            IERC721 public NFT;
            uint public StartingPrice
;
            bool public started;
            bool public ended;
            bool public endAt;
            uint public during;
        }

        event bid(address bider, uint amount);
        event End(address winner);

        mapping(address => uint) public bides;
        address [] public bidesArr;
        
        constructor(address _NFT, uint _highestBid, uint durintion){
            seller = msg.sender;
            started = false;
            initialize(_NFT, _highestBid, durintion);
        }
        
        function initialize(address _NFT, uint startBig, uint durinion) private{
            require(isInitialized == false, "The initialization is already done.");
            require(_NFT.tokenURI, "It is not sellers token");
            started = true;
            NFT = ERC721(_NFT);
            bids[msg.sender] = startBig;
            bidesArr.push(msg.sender);
            during = durinion;
            //Start = block.timestamp;
            isInitialized = true;
        } 

        modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Only owner or collectors can call this function");
        _;
        }

        function withdraw() public payable{
            require(address != highestBidder, "The highestBidder can not withdraw his dib.");
            
        }
    }